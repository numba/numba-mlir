# SPDX-FileCopyrightText: 2022 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

name: Cross-compile Numba-MLIR on CPUs

on:
  push:
    branches:
      - main
  pull_request:

env:
  TBB_VER: 2021.6.0
  LEVEL_ZERO_VER: v1.6.2
  TBB_URL_PREFIX: https://github.com/oneapi-src/oneTBB/releases/download/
  LLVM_SHA_FILE: llvm-sha.txt

jobs:
  build_win:
    name: Builds Numba-MLIR core on Windows
    runs-on: windows-latest
    timeout-minutes: 450

    steps:
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

      - name: Cache conda packages
        uses: actions/cache@v2
        env:
          CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{hashFiles('**/meta.yaml') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          use-only-tar-bz2: true
          run-post: false

      - name: Install CMake and Ninja
        run: |
          conda install cmake ninja lit

      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Cache Vars
        run: |
          $sha = (cat "$env:GITHUB_WORKSPACE\$env:LLVM_SHA_FILE")
          echo "LLVM_SHA=$sha" >> $env:GITHUB_ENV
          $wspath = (Resolve-Path "$env:GITHUB_WORKSPACE\..\")
          echo "WORKSPACE=$wspath" >> $env:GITHUB_ENV
          cat $env:GITHUB_ENV

      - name: Cache TBB
        id: cache-tbb
        uses: actions/cache@v3
        with:
          path: |
            D:\a\numba-mlir\tbb\*
          key: ${{ runner.os }}-build-tbb-${{ env.TBB_VER }}

      - name: Cache Level-Zero
        id: cache-level-zero
        uses: actions/cache@v3
        with:
          path: |
            D:\a\numba-mlir\level-zero\**
          key: ${{ runner.os }}-build-l0-${{ env.LEVEL_ZERO_VER }}

      - name: Cache LLLVM-MLIR
        id: cache-llvm-mlir
        uses: actions/cache@v3
        env:
          LLVM_CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: |
            D:\a\numba-mlir\llvm-mlir\_mlir_install\**
          key: ${{ runner.os }}-build-llvm-${{ env.LLVM_CACHE_NUMBER }}-${{ env.LLVM_SHA }}

      - name: Download TBB
        if: steps.cache-tbb.outputs.cache-hit != 'true'
        run: |
          cd $env:WORKSPACE
          mkdir -ea 0 -p tbb
          pushd tbb
          if((Test-Path -PathType leaf bundle_id.txt) -and ((cat bundle_id.txt) -eq ($env:TBB_VER)))
          {
            echo "INFO: Using cached download of TBB $env:TBB_VER"
          } else {
            echo "INFO: Downloading TBB $env:TBB_VER"
            rm -r *
            $TBB_FN="oneapi-tbb-$env:TBB_VER-win.zip"
            Invoke-WebRequest "$env:TBB_URL_PREFIX/v$env:TBB_VER/$TBB_FN" -OutFile $TBB_FN
            Expand-Archive $TBB_FN -DestinationPath .
            ls
            (Select-String -Pattern "Version: " (ls -Filter tbb.pc -Recurse -Name)).Line.Split(" ")[-1] > bundle_id.txt
            cat bundle_id.txt
          }
          popd

      - name: Download and Build Level-Zero
        if: steps.cache-level-zero.outputs.cache-hit != 'true'
        run: |
          cd $env:WORKSPACE
          mkdir -ea 0 -p level-zero
          pushd level-zero
          if((Test-Path -PathType leaf bundle_id.txt) -and ((cat bundle_id.txt) -eq ($env:LEVEL_ZERO_VER)))
          {
            echo "INFO: Using cached build of Level-Zero $env:LEVEL_ZERO_VER"
          } else {
            echo "INFO: INFO: Downloading and building Level-Zero $env:LEVEL_ZERO_VER"
            rm -r *
            echo "$env:LEVEL_ZERO_VER" > bundle_id.txt
            cat bundle_id.txt
            git clone https://github.com/oneapi-src/level-zero.git
            pushd level-zero
            git checkout $env:LEVEL_ZERO_VER
            mkdir level_zero_install
            mkdir build
            cd build
            cmake ..                                                           `
              -GNinja                                                          `
              -DCMAKE_BUILD_TYPE=Release                                       `
              -DCMAKE_INSTALL_PREFIX="$env:WORKSPACE\level-zero\level-zero\level_zero_install"
            ninja install
            popd
          }
          popd

      - name: Build LLVM-MLIR
        if: steps.cache-llvm-mlir.outputs.cache-hit != 'true'
        timeout-minutes: 420
        run: |
          cd $env:WORKSPACE
          mkdir -ea 0 -p llvm-mlir
          pushd llvm-mlir
          echo "INFO: Need to rebuild LLVM-MLIR. Previous installation for MLIR not found"
          git clone https://github.com/llvm/llvm-project
          cd llvm-project
          git checkout $env:LLVM_SHA
          mkdir _build
          cd _build
          cmake ../llvm                                                    `
            -GNinja                                                        `
            -DCMAKE_BUILD_TYPE=Release                                     `
            -DLLVM_ENABLE_PROJECTS=mlir                                    `
            -DLLVM_ENABLE_ASSERTIONS=ON                                    `
            -DLLVM_ENABLE_RTTI=ON                                          `
            -DLLVM_USE_LINKER=gold                                         `
            -DLLVM_INSTALL_UTILS=ON                                        `
            -DLLVM_TARGETS_TO_BUILD=X86                                    `
            -DLLVM_ENABLE_BINDINGS=OFF                                     `
            -DLLVM_ENABLE_ZSTD=OFF                                         `
            -DLLVM_DISTRIBUTION_COMPONENTS="llvm-headers;llvm-libraries;cmake-exports;FileCheck;count;not;mlir-headers;mlir-libraries;mlir-cmake-exports;mlir-tblgen;mlir-cpu-runner" `
            -DCMAKE_INSTALL_PREFIX="$env:WORKSPACE/llvm-mlir/_mlir_install"
          ninja install-distribution-stripped
          cp bin/FileCheck.exe $env:WORKSPACE/llvm-mlir/_mlir_install/bin/
          cp bin/count.exe $env:WORKSPACE/llvm-mlir/_mlir_install/bin/
          cp bin/not.exe $env:WORKSPACE/llvm-mlir/_mlir_install/bin/
          popd

      - name: Build Numba-MLIR
        run: |
          $external_lit="$env:GITHUB_WORKSPACE\scripts\runlit.py"
          mkdir -p _build
          cd _build
          $env:TBB_PATH=(Resolve-Path "$env:WORKSPACE/tbb/oneapi-tbb-$env:TBB_VER")
          $env:LEVEL_ZERO_DIR=(Resolve-Path "$env:WORKSPACE/level-zero/level-zero/level_zero_install")
          $env:LEVEL_ZERO_VERSION_CHECK_OFF="1"
          $env:LLVM_DIR=(Resolve-Path "$env:WORKSPACE/llvm-mlir/_mlir_install")
          cmake "$env:GITHUB_WORKSPACE"                                        `
            -GNinja                                                            `
            -DCMAKE_BUILD_TYPE=Release                                         `
            -DLLVM_DIR="$env:LLVM_DIR/lib/cmake/llvm"                          `
            -DMLIR_DIR="$env:LLVM_DIR/lib/cmake/mlir"                          `
            -DNUMBA_MLIR_ENABLE_IGPU_DIALECT=ON                                `
            -DNUMBA_MLIR_ENABLE_TESTS=ON                                       `
            -DNUMBA_MLIR_ENABLE_TBB_SUPPORT=ON                                 `
            -DTBB_DIR="$env:TBB_PATH/lib/cmake/tbb"                            `
            -DLLVM_EXTERNAL_LIT="$external_lit"
          ninja all

      - name: Run Numba-MLIR core test cases
        run: |
          cd _build
          ninja check-numba-mlir

  build_win_python:
    name: Builds Numba-MLIR on Windows
    runs-on: windows-latest
    timeout-minutes: 450
    needs: build_win

    strategy:
      matrix:
        python: ["3.8", "3.9", "3.10"]
        is_main:
          - ${{ github.ref == 'refs/heads/main' }}
        exclude:
          - is_main: false
            python: "3.8"
          - is_main: false
            python: "3.9"

    steps:
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

      - name: Cache conda packages
        uses: actions/cache@v2
        env:
          CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{hashFiles('**/meta.yaml') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          use-only-tar-bz2: true
          run-post: false

      - name: Install CMake and Ninja
        run: |
          conda install cmake ninja lit

      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Cache Vars
        run: |
          $sha = (cat "$env:GITHUB_WORKSPACE\$env:LLVM_SHA_FILE")
          echo "LLVM_SHA=$sha" >> $env:GITHUB_ENV
          $wspath = (Resolve-Path "$env:GITHUB_WORKSPACE\..\")
          echo "WORKSPACE=$wspath" >> $env:GITHUB_ENV
          cat $env:GITHUB_ENV

      - name: Cache TBB
        id: cache-tbb
        uses: actions/cache@v3
        with:
          path: |
            D:\a\numba-mlir\tbb\*
          key: ${{ runner.os }}-build-tbb-${{ env.TBB_VER }}

      - name: Cache Level-Zero
        id: cache-level-zero
        uses: actions/cache@v3
        with:
          path: |
            D:\a\numba-mlir\level-zero\**
          key: ${{ runner.os }}-build-l0-${{ env.LEVEL_ZERO_VER }}

      - name: Cache LLLVM-MLIR
        id: cache-llvm-mlir
        uses: actions/cache@v3
        env:
          LLVM_CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: |
            D:\a\numba-mlir\llvm-mlir\_mlir_install\**
          key: ${{ runner.os }}-build-llvm-${{ env.LLVM_CACHE_NUMBER }}-${{ env.LLVM_SHA }}


      - name: Build Python frontend
        run: |
          cd numba_mlir
          conda create -y -n test-env python=${{ matrix.python }} "pip>=22" numba=0.56 numpy=1.22 "setuptools<65.6" scikit-learn pytest-xdist ninja scipy pybind11 pytest "tbb=$env:TBB_VER" cmake "mkl-devel-dpcpp>=2023.0.0" conda-build conda-verify zlib -c conda-forge -c intel
          conda info
          conda activate test-env
          echo "Conda prefix: $env:CONDA_PREFIX"
          echo "Patch broken Windows MKLConfig.cmake"
          cp "$env:GITHUB_WORKSPACE/numba_mlir/conda-recipe/MKLConfig.cmake" "$env:CONDA_PREFIX/Library/lib/cmake/mkl" -Force
          conda list
          python -c "import numba; print('numba', numba.__version__)"
          python -c "import numpy; print(numpy.get_include())"
          cmake --version
          $env:TBB_PATH=(Resolve-Path "$env:WORKSPACE/tbb/oneapi-tbb-$env:TBB_VER")
          $env:LEVEL_ZERO_DIR=(Resolve-Path "$env:WORKSPACE/level-zero/level-zero/level_zero_install")
          $env:LEVEL_ZERO_VERSION_CHECK_OFF="1"
          $env:LLVM_PATH=(Resolve-Path "$env:WORKSPACE/llvm-mlir/_mlir_install")
          python setup.py develop

      - name: Test Python frontend
        run: |
          cd numba_mlir
          conda activate test-env
          python "$env:GITHUB_WORKSPACE/scripts/run_package_tests.py" verbose

      - name: Build wheels
        run: |
          mkdir numba_mlir_wheels
          pushd numba_mlir_wheels
          conda activate test-env
          $env:TBB_PATH=(Resolve-Path "$env:WORKSPACE/tbb/oneapi-tbb-$env:TBB_VER")
          $env:LEVEL_ZERO_DIR=(Resolve-Path "$env:WORKSPACE/level-zero/level-zero/level_zero_install")
          $env:LEVEL_ZERO_VERSION_CHECK_OFF="1"
          $env:LLVM_PATH=(Resolve-Path "$env:WORKSPACE/llvm-mlir/_mlir_install")
          pip wheel --no-deps -v ../numba_mlir
          ls .
          popd
          rm -r numba_mlir_cmake_build

      - name: Test wheels
        run: |
          cd numba_mlir_wheels
          conda create -y -n wheels-test-env python=${{ matrix.python }} numba=0.56 numpy=1.22 "setuptools<65.6" scikit-learn pytest-xdist ninja scipy pybind11 pytest "tbb=$env:TBB_VER" cmake "mkl-devel-dpcpp>=2023.0.0" -c conda-forge -c intel
          conda info
          conda activate wheels-test-env
          conda list
          ls .
          ls *.whl | Foreach-Object { pip install $_.FullName }
          python "$env:GITHUB_WORKSPACE/scripts/run_package_tests.py" verbose smoke

      - name: Build conda package
        run: |
          mkdir numba_mlir_conda
          pushd numba_mlir_conda
          conda activate test-env
          $env:TBB_PATH=(Resolve-Path "$env:WORKSPACE/tbb/oneapi-tbb-$env:TBB_VER")
          $env:LEVEL_ZERO_DIR=(Resolve-Path "$env:WORKSPACE/level-zero/level-zero/level_zero_install")
          $env:LEVEL_ZERO_VERSION_CHECK_OFF="1"
          $env:LLVM_PATH=(Resolve-Path "$env:WORKSPACE/llvm-mlir/_mlir_install")
          conda build --output-folder=. ../numba_mlir/conda-recipe
          cd win-64
          ls .
          popd

      - name: Test conda package
        run: |
          cd numba_mlir_conda/win-64
          conda create -y -n conda-test-env python=${{ matrix.python }} numba=0.56 numpy=1.22 "setuptools<65.6" scikit-learn pytest-xdist ninja scipy pybind11 pytest "tbb=$env:TBB_VER" cmake "mkl-devel-dpcpp>=2023.0.0" -c conda-forge -c intel
          conda info
          conda activate conda-test-env
          conda list
          ls .
          ls *.tar.bz2 | Foreach-Object { conda install $_.FullName }
          python "$env:GITHUB_WORKSPACE/scripts/run_package_tests.py" verbose smoke


      - name: Upload artifact
        if: matrix.is_main
        uses: actions/upload-artifact@v2
        with:
          name: numba-mlir ${{ runner.os }} Python ${{ matrix.python }} SHA ${{ github.sha }}
          path: numba_mlir_conda/win-64/*.tar.bz2
          retention-days: 30


  build_linux:
    name: Builds Numba-MLIR core on Linux
    runs-on: ubuntu-latest
    timeout-minutes: 450

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

      - name: Set pkgs_dirs
        run: |
          echo "pkgs_dirs: [~/.conda/pkgs]" >> ~/.condarc

      - name: Cache conda packages
        uses: actions/cache@v2
        env:
          CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: ~/.conda/pkgs
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{hashFiles('**/meta.yaml') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-

      - name: Add conda to system path
        run: echo $CONDA/bin >> $GITHUB_PATH

      - name: Install CMake and Ninja
        run: |
          conda install cmake ninja lit

      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Cache Vars
        run: |
          echo 'LLVM_SHA<<EOF' >> $GITHUB_ENV
          cat $GITHUB_WORKSPACE/$LLVM_SHA_FILE >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Cache TBB
        id: cache-tbb
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/work/tbb/*
          key: ${{ runner.os }}-build-tbb-${{ env.TBB_VER }}

      - name: Cache Level-Zero
        id: cache-level-zero
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/work/level-zero/**
          key: ${{ runner.os }}-build-l0-${{ env.LEVEL_ZERO_VER }}

      - name: Cache LLLVM-MLIR
        id: cache-llvm-mlir
        uses: actions/cache@v3
        env:
          LLVM_CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: |
            /home/runner/work/llvm-mlir/_mlir_install/**
          key: ${{ runner.os }}-build-llvm-${{ env.LLVM_CACHE_NUMBER }}-${{ env.LLVM_SHA }}

      - name: Download TBB
        if: steps.cache-tbb.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          cd /home/runner/work
          mkdir -p tbb
          pushd tbb
          if [[ -f bundle_id.txt && ( "$(cat bundle_id.txt)" == "${TBB_VER}" ) ]]; then
            echo "INFO: Using cached download of TBB ${TBB_VER}"
          else
            echo "INFO: Downloading TBB ${TBB_VER}"
            rm -rf *
            export TBB_FN=oneapi-tbb-${TBB_VER}-lin.tgz
            wget ${TBB_URL_PREFIX}/v${TBB_VER}/${TBB_FN} || exit 1
            tar xf ${TBB_FN} -C . || exit 1
            cat $(find . -name tbb.pc) | grep Version: | cut -d " " -f 2 > bundle_id.txt || rm -rf bundle_id.txt
            [ -f bundle_id.txt ] || exit 1
          fi
          popd

      - name: Download and Build Level-Zero
        if: steps.cache-level-zero.outputs.cache-hit != 'true'
        shell: bash -l {0}
        run: |
          cd /home/runner/work
          mkdir -p level-zero
          pushd level-zero
          tree
          if [[ -f bundle_id.txt && ( "$(cat bundle_id.txt)" == "${LEVEL_ZERO_VER}" ) ]]; then
            echo "INFO: Using cached build of Level-Zero ${LEVEL_ZERO_VER}"
          else
            echo "INFO: Downloading and building Level-Zero ${LEVEL_ZERO_VER}"
            rm -rf *
            echo ${LEVEL_ZERO_VER} > bundle_id.txt || rm -rf bundle_id.txt
            cat bundle_id.txt || exit 1
            [ -f bundle_id.txt ] || exit 1
            git clone https://github.com/oneapi-src/level-zero.git || exit 1
            pushd level-zero || exit 1
            git checkout ${LEVEL_ZERO_VER} || exit 1
            mkdir level_zero_install || exit 1
            mkdir build || exit 1
            cd build || exit 1
            cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../level_zero_install .. || exit 1
            make install || exit 1
            popd
          fi
          popd

      - name: Build LLVM-MLIR
        if: steps.cache-llvm-mlir.outputs.cache-hit != 'true'
        shell: bash -l {0}
        timeout-minutes: 420
        run: |
          mkdir -p /home/runner/work/llvm-mlir
          pushd /home/runner/work/llvm-mlir
          echo "INFO: Need to rebuild LLVM-MLIR. Previous installation for MLIR not found"
          np=`nproc`
          echo "INFO: nproc $np"
          git clone https://github.com/llvm/llvm-project || exit 1
          cd llvm-project || exit 1
          git checkout $LLVM_SHA || exit 1
          mkdir _build || exit 1
          cd _build || exit 1
          cmake ../llvm                                                    \
            -GNinja                                                        \
            -DCMAKE_BUILD_TYPE=Release                                     \
            -DLLVM_ENABLE_PROJECTS=mlir                                    \
            -DLLVM_ENABLE_ASSERTIONS=ON                                    \
            -DLLVM_ENABLE_RTTI=ON                                          \
            -DLLVM_USE_LINKER=gold                                         \
            -DLLVM_INSTALL_UTILS=ON                                        \
            -DLLVM_TARGETS_TO_BUILD=X86                                    \
            -DLLVM_ENABLE_BINDINGS=OFF                                     \
            -DLLVM_ENABLE_ZSTD=OFF                                         \
            -DLLVM_DISTRIBUTION_COMPONENTS="llvm-headers;llvm-libraries;cmake-exports;FileCheck;count;not;mlir-headers;mlir-libraries;mlir-cmake-exports;mlir-tblgen;mlir-cpu-runner" \
            -DCMAKE_INSTALL_PREFIX=/home/runner/work/llvm-mlir/_mlir_install || exit 1
          ninja install-distribution-stripped || exit 1
          cp bin/FileCheck /home/runner/work/llvm-mlir/_mlir_install/bin/
          cp bin/count /home/runner/work/llvm-mlir/_mlir_install/bin/
          cp bin/not /home/runner/work/llvm-mlir/_mlir_install/bin/
          popd

      - name: Build Numba-MLIR
        shell: bash -l {0}

        run: |
          mkdir -p _build
          cd _build
          export EXTERNAL_LIT=${GITHUB_WORKSPACE}/scripts/runlit.py
          export TBB_PATH=/home/runner/work/tbb/oneapi-tbb-${TBB_VER}
          export LEVEL_ZERO_DIR=/home/runner/work/level-zero/level-zero/level_zero_install
          export LEVEL_ZERO_VERSION_CHECK_OFF=1
          export LLVM_DIR=/home/runner/work/llvm-mlir/_mlir_install
          cmake ${GITHUB_WORKSPACE}                                             \
            -GNinja                                                             \
            -DCMAKE_BUILD_TYPE=Release                                          \
            -DLLVM_DIR=${LLVM_DIR}/lib/cmake/llvm                               \
            -DMLIR_DIR=${LLVM_DIR}/lib/cmake/mlir                               \
            -DNUMBA_MLIR_ENABLE_IGPU_DIALECT=ON                                 \
            -DNUMBA_MLIR_ENABLE_TESTS=ON                                        \
            -DNUMBA_MLIR_ENABLE_TBB_SUPPORT=ON                                  \
            -DTBB_DIR=${TBB_PATH}/lib/cmake/tbb                                 \
            -DLLVM_EXTERNAL_LIT=${EXTERNAL_LIT}                                 \
             || exit 1
          ninja all || exit 1

      - name: Run Numba-MLIR core test cases
        shell: bash -l {0}

        run: |
          cd _build || exit 1
          ninja check-numba-mlir || exit 1


  build_linux_python:
    name: Builds Numba-MLIR on Linux
    runs-on: ubuntu-latest
    timeout-minutes: 450
    needs: build_linux

    strategy:
      matrix:
        python: ["3.8", "3.9", "3.10"]
        is_main:
          - ${{ github.ref == 'refs/heads/main' }}
        exclude:
          - is_main: false
            python: "3.8"
          - is_main: false
            python: "3.9"

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

      - name: Set pkgs_dirs
        run: |
          echo "pkgs_dirs: [~/.conda/pkgs]" >> ~/.condarc

      - name: Cache conda packages
        uses: actions/cache@v2
        env:
          CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: ~/.conda/pkgs
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{hashFiles('**/meta.yaml') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-

      - name: Add conda to system path
        run: echo $CONDA/bin >> $GITHUB_PATH

      - name: Install CMake and Ninja
        run: |
          conda install cmake ninja lit

      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Cache Vars
        run: |
          echo 'LLVM_SHA<<EOF' >> $GITHUB_ENV
          cat $GITHUB_WORKSPACE/$LLVM_SHA_FILE >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Cache TBB
        id: cache-tbb
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/work/tbb/*
          key: ${{ runner.os }}-build-tbb-${{ env.TBB_VER }}

      - name: Cache Level-Zero
        id: cache-level-zero
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/work/level-zero/**
          key: ${{ runner.os }}-build-l0-${{ env.LEVEL_ZERO_VER }}

      - name: Cache LLLVM-MLIR
        id: cache-llvm-mlir
        uses: actions/cache@v3
        env:
          LLVM_CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: |
            /home/runner/work/llvm-mlir/_mlir_install/**
          key: ${{ runner.os }}-build-llvm-${{ env.LLVM_CACHE_NUMBER }}-${{ env.LLVM_SHA }}


      - name: Build Python frontend
        shell: bash -l {0}

        run: |
          cd numba_mlir
          conda create -y -n test-env python=${{ matrix.python }} "pip>=22" numba=0.56 numpy=1.22 "setuptools<65.6" scikit-learn pytest-xdist ninja scipy pybind11 pytest tbb=${TBB_VER} cmake "mkl-devel-dpcpp>=2023.0.0" conda-build conda-verify -c conda-forge -c intel
          conda info
          source $CONDA/bin/activate test-env
          conda list
          python -c "import numba; print('numba', numba.__version__)"
          python -c "import numpy; print(numpy.get_include())"
          cmake --version
          export TBB_PATH=/home/runner/work/tbb/oneapi-tbb-${TBB_VER}
          export LLVM_PATH=/home/runner/work/llvm-mlir/_mlir_install
          export LEVEL_ZERO_DIR=/home/runner/work/level-zero/level-zero/level_zero_install
          export LEVEL_ZERO_VERSION_CHECK_OFF=1
          python setup.py develop

      - name: Test Python frontend
        shell: bash -l {0}

        run: |
          cd numba_mlir
          source $CONDA/bin/activate test-env
          python $GITHUB_WORKSPACE/scripts/run_package_tests.py verbose

      - name: Build wheels
        shell: bash -l {0}

        run: |
          mkdir numba_mlir_wheels
          pushd numba_mlir_wheels
          source $CONDA/bin/activate test-env
          export TBB_PATH=/home/runner/work/tbb/oneapi-tbb-${TBB_VER}
          export LLVM_PATH=/home/runner/work/llvm-mlir/_mlir_install
          export LEVEL_ZERO_DIR=/home/runner/work/level-zero/level-zero/level_zero_install
          export LEVEL_ZERO_VERSION_CHECK_OFF=1
          pip wheel --no-deps -v ../numba_mlir
          ls -l --block-size=M
          popd
          rm -rf numba_mlir_cmake_build

      - name: Test wheels
        shell: bash -l {0}

        run: |
          cd numba_mlir_wheels
          conda create -y -n wheels-test-env python=${{ matrix.python }} numba=0.56 numpy=1.22 "setuptools<65.6" scikit-learn pytest-xdist ninja scipy pybind11 pytest tbb=${TBB_VER} cmake "mkl-devel-dpcpp>=2023.0.0" -c conda-forge -c intel
          conda info
          source $CONDA/bin/activate wheels-test-env
          conda list
          pip install *.whl
          python $GITHUB_WORKSPACE/scripts/run_package_tests.py verbose smoke

      - name: Build conda package
        shell: bash -l {0}

        run: |
          mkdir numba_mlir_conda
          pushd numba_mlir_conda
          source $CONDA/bin/activate test-env
          export TBB_PATH=/home/runner/work/tbb/oneapi-tbb-${TBB_VER}
          export LLVM_PATH=/home/runner/work/llvm-mlir/_mlir_install
          export LEVEL_ZERO_DIR=/home/runner/work/level-zero/level-zero/level_zero_install
          export LEVEL_ZERO_VERSION_CHECK_OFF=1
          conda build --output-folder=. ../numba_mlir/conda-recipe || exit 1
          cd linux-64
          ls -l --block-size=M
          popd
          rm -rf numba_mlir_cmake_build

      - name: Test conda package
        shell: bash -l {0}

        run: |
          cd numba_mlir_conda/linux-64
          conda create -y -n conda-test-env python=${{ matrix.python }} numba=0.56 numpy=1.22 "setuptools<65.6" scikit-learn pytest-xdist ninja scipy pybind11 pytest tbb=${TBB_VER} cmake "mkl-devel-dpcpp>=2023.0.0" -c conda-forge -c intel
          conda info
          source $CONDA/bin/activate conda-test-env
          conda list
          conda install numba-mlir-*.tar.bz2
          python $GITHUB_WORKSPACE/scripts/run_package_tests.py verbose smoke

      - name: Upload artifact
        if: matrix.is_main
        uses: actions/upload-artifact@v2
        with:
          name: numba-mlir ${{ runner.os }} Python ${{ matrix.python }} SHA ${{ github.sha }}
          path: numba_mlir_conda/linux-64/*.tar.bz2
          retention-days: 30

  upload_packages:
    name: Upload conda packages
    if: ${{ github.ref == 'refs/heads/main' }}
    timeout-minutes: 450
    needs: [build_linux_python, build_win_python]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python: ["3.8", "3.9", "3.10"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: numba-mlir ${{ runner.os }} Python ${{ matrix.python }} SHA ${{ github.sha }}

      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          use-only-tar-bz2: true
          run-post: false
          auto-activate-base: true
          activate-environment: ""
      - name: Install anaconda-client
        run: conda install anaconda-client

      - name: Add conda to system path
        if: matrix.os == 'ubuntu-latest'
        run: echo $CONDA/bin >> $GITHUB_PATH

      - name: Upload
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: |
          anaconda --token ${{ env.ANACONDA_TOKEN }} upload --user dppy --label dev numba-mlir-*.tar.bz2
